@page
@model IndexModel
@{
    ViewData["Title"] = "Sistema de Gestión de Cola Bancaria";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        h1 {
            color: white;
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            text-align: center;
            transition: transform 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-card h3 {
            color: #667eea;
            font-size: 1.2em;
            margin-bottom: 10px;
        }

        .stat-card .number {
            font-size: 3em;
            font-weight: bold;
            color: #764ba2;
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }

        .card h2 {
            color: #667eea;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 3px solid #764ba2;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            color: #333;
            font-weight: 600;
        }

        .form-group input, .form-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 1em;
            transition: border 0.3s ease;
        }

        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #667eea;
        }

        .btn {
            padding: 12px 30px;
            border: none;
            border-radius: 8px;
            font-size: 1em;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-top: 10px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .btn-success {
            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
            color: white;
        }

        .btn-success:hover {
            transform: scale(1.05);
        }

        .btn-warning {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
        }

        .btn-danger {
            background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
            color: white;
        }

        .btn-info {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
        }

        .btn-small {
            padding: 6px 12px;
            font-size: 0.85em;
        }

        .queue-section {
            margin-top: 20px;
        }

        .queue-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .tab-btn {
            flex: 1;
            padding: 12px;
            border: none;
            background: #e0e0e0;
            cursor: pointer;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .tab-btn.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .queue-list {
            max-height: 500px;
            overflow-y: auto;
        }

        .ticket-item {
            background: #f8f9fa;
            border-left: 5px solid #667eea;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s ease;
        }

        .ticket-item:hover {
            background: #e9ecef;
            transform: translateX(5px);
        }

        .ticket-item.atendiendo {
            border-left-color: #38ef7d;
            background: #e8f9f1;
        }

        .ticket-item.completado {
            border-left-color: #f5576c;
            background: #ffeef1;
        }

        .ticket-info {
            flex: 1;
        }

        .ticket-info h4 {
            color: #333;
            margin-bottom: 5px;
        }

        .ticket-info p {
            color: #666;
            font-size: 0.9em;
            margin: 3px 0;
        }

        .ticket-actions {
            display: flex;
            gap: 5px;
        }

        .badge {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: 600;
            margin-left: 10px;
        }

        .badge-normal {
            background: #e3f2fd;
            color: #1976d2;
        }

        .badge-preferente {
            background: #fff3e0;
            color: #f57c00;
        }

        .badge-urgente {
            background: #ffebee;
            color: #c62828;
        }

        .empty-state {
            text-align: center;
            padding: 40px;
            color: #999;
        }

        .empty-state svg {
            width: 100px;
            height: 100px;
            opacity: 0.3;
            margin-bottom: 20px;
        }

        #notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            display: none;
            z-index: 1000;
            animation: slideIn 0.3s ease;
        }

        #notification.success {
            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        }

        #notification.error {
            background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
        }

        @@keyframes slideIn {
            from {
                transform: translateX(400px);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @@media (max-width: 968px) {
            .main-content {
                grid-template-columns: 1fr;
            }
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: white;
            margin: 10% auto;
            padding: 30px;
            border-radius: 15px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: #000;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }

        @@keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div id="notification"></div>

    <div class="container">
        <h1>🏦 Sistema de Gestión de Cola Bancaria</h1>

        <!-- Dashboard de Estadísticas -->
        <div class="dashboard" id="estadisticas">
            <div class="stat-card">
                <h3>📋 En Espera</h3>
                <div class="number" id="stat-espera">0</div>
            </div>
            <div class="stat-card">
                <h3>🔄 Atendiendo</h3>
                <div class="number" id="stat-atendiendo">0</div>
            </div>
            <div class="stat-card">
                <h3>✅ Completados</h3>
                <div class="number" id="stat-completados">0</div>
            </div>
            <div class="stat-card">
                <h3>📊 Total Tickets</h3>
                <div class="number" id="stat-total">0</div>
            </div>
        </div>

        <!-- Contenido Principal -->
        <div class="main-content">
            <!-- Formulario de Creación -->
            <div class="card">
                <h2>➕ Generar Nuevo Ticket</h2>
                <form id="formCrearTicket">
                    <div class="form-group">
                        <label for="nombreCliente">Nombre del Cliente</label>
                        <input type="text" id="nombreCliente" required placeholder="Ej: Juan Pérez">
                    </div>
                    <div class="form-group">
                        <label for="tipoOperacion">Tipo de Operación</label>
                        <select id="tipoOperacion" required>
                            <option value="">Seleccione...</option>
                            <option value="Depósito">Depósito</option>
                            <option value="Retiro">Retiro</option>
                            <option value="Consulta">Consulta</option>
                            <option value="Apertura de Cuenta">Apertura de Cuenta</option>
                            <option value="Pago de Servicios">Pago de Servicios</option>
                            <option value="Solicitud de Crédito">Solicitud de Crédito</option>
                            <option value="Transferencia">Transferencia</option>
                            <option value="Robo">Robo</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="prioridad">Prioridad</label>
                        <select id="prioridad">
                            <option value="0">Normal</option>
                            <option value="1">Preferente</option>
                            <option value="2">Urgente</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary">Generar Ticket</button>
                </form>

                <hr style="margin: 30px 0; border: 1px solid #e0e0e0;">

                <h2>⚙️ Acciones Rápidas</h2>
                <button onclick="atenderSiguiente()" class="btn btn-success">▶️ Atender Siguiente</button>
                <button onclick="cargarDatosPrueba()" class="btn btn-info">📦 Cargar Datos de Prueba</button>
                <button onclick="limpiarCompletados()" class="btn btn-warning">🗑️ Limpiar Completados</button>
                <button onclick="actualizarTodo()" class="btn btn-primary">🔄 Actualizar Vista</button>
            </div>

            <!-- Lista de Tickets -->
            <div class="card">
                <h2>📋 Gestión de Tickets</h2>
                
                <div class="queue-tabs">
                    <button class="tab-btn active" onclick="mostrarTab('espera')">En Espera</button>
                    <button class="tab-btn" onclick="mostrarTab('atendiendo')">Atendiendo</button>
                    <button class="tab-btn" onclick="mostrarTab('completados')">Completados</button>
                    <button class="tab-btn" onclick="mostrarTab('todos')">Todos</button>
                </div>

                <div id="tab-espera" class="queue-list"></div>
                <div id="tab-atendiendo" class="queue-list" style="display: none;"></div>
                <div id="tab-completados" class="queue-list" style="display: none;"></div>
                <div id="tab-todos" class="queue-list" style="display: none;"></div>
            </div>
        </div>
    </div>

    <!-- Modal para Editar Ticket -->
    <div id="modalEditar" class="modal">
        <div class="modal-content">
            <span class="close" onclick="cerrarModal()">&times;</span>
            <h2>✏️ Editar Ticket</h2>
            <form id="formEditarTicket">
                <input type="hidden" id="editTicketId">
                <div class="form-group">
                    <label for="editNombre">Nombre del Cliente</label>
                    <input type="text" id="editNombre" required>
                </div>
                <div class="form-group">
                    <label for="editOperacion">Tipo de Operación</label>
                    <select id="editOperacion" required>
                        <option value="Depósito">Depósito</option>
                        <option value="Retiro">Retiro</option>
                        <option value="Consulta">Consulta</option>
                        <option value="Apertura de Cuenta">Apertura de Cuenta</option>
                        <option value="Pago de Servicios">Pago de Servicios</option>
                        <option value="Solicitud de Crédito">Solicitud de Crédito</option>
                        <option value="Transferencia">Transferencia</option>
                        <option value="Robo">Robo</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="editPrioridad">Prioridad</label>
                    <select id="editPrioridad">
                        <option value="0">Normal</option>
                        <option value="1">Preferente</option>
                        <option value="2">Urgente</option>
                    </select>
                </div>
                <button type="submit" class="btn btn-primary">Guardar Cambios</button>
                <button type="button" onclick="cerrarModal()" class="btn btn-danger">Cancelar</button>
            </form>
        </div>
    </div>

    <script>
        const API_URL = '/api/banco';
        let currentTab = 'espera';

        // Cargar datos al iniciar
        document.addEventListener('DOMContentLoaded', function() {
            actualizarTodo();
            // Auto-actualizar cada 5 segundos
            setInterval(actualizarTodo, 5000);
        });

        // Formulario de crear ticket
        document.getElementById('formCrearTicket').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const data = {
                nombreCliente: document.getElementById('nombreCliente').value,
                tipoOperacion: document.getElementById('tipoOperacion').value,
                prioridad: parseInt(document.getElementById('prioridad').value)
            };

            try {
                const response = await fetch(`${API_URL}/tickets`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    mostrarNotificacion('✅ Ticket generado correctamente', 'success');
                    this.reset();
                    actualizarTodo();
                } else {
                    mostrarNotificacion('❌ Error al generar ticket', 'error');
                }
            } catch (error) {
                mostrarNotificacion('❌ Error de conexión', 'error');
            }
        });

        // Formulario de editar ticket
        document.getElementById('formEditarTicket').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const id = document.getElementById('editTicketId').value;
            const data = {
                nombreCliente: document.getElementById('editNombre').value,
                tipoOperacion: document.getElementById('editOperacion').value,
                prioridad: parseInt(document.getElementById('editPrioridad').value)
            };

            try {
                const response = await fetch(`${API_URL}/tickets/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    mostrarNotificacion('✅ Ticket actualizado correctamente', 'success');
                    cerrarModal();
                    actualizarTodo();
                } else {
                    mostrarNotificacion('❌ Error al actualizar ticket', 'error');
                }
            } catch (error) {
                mostrarNotificacion('❌ Error de conexión', 'error');
            }
        });

        async function actualizarTodo() {
            await actualizarEstadisticas();
            await actualizarTickets();
        }

        async function actualizarEstadisticas() {
            try {
                const response = await fetch(`${API_URL}/estadisticas`);
                const stats = await response.json();
                
                document.getElementById('stat-espera').textContent = stats.clientesEnEspera;
                document.getElementById('stat-atendiendo').textContent = stats.clientesAtendiendo;
                document.getElementById('stat-completados').textContent = stats.clientesCompletados;
                document.getElementById('stat-total').textContent = stats.totalTickets;
            } catch (error) {
                console.error('Error al actualizar estadísticas:', error);
            }
        }

        async function actualizarTickets() {
            try {
                // Actualizar cada pestaña
                const espera = await fetch(`${API_URL}/espera`).then(r => r.json());
                const atendiendo = await fetch(`${API_URL}/atendiendo`).then(r => r.json());
                const completados = await fetch(`${API_URL}/completados`).then(r => r.json());
                const todos = await fetch(`${API_URL}/tickets`).then(r => r.json());

                renderizarTickets('tab-espera', espera, 'espera');
                renderizarTickets('tab-atendiendo', atendiendo, 'atendiendo');
                renderizarTickets('tab-completados', completados, 'completado');
                renderizarTickets('tab-todos', todos, 'todos');
            } catch (error) {
                console.error('Error al actualizar tickets:', error);
            }
        }

        function renderizarTickets(containerId, tickets, tipo) {
            const container = document.getElementById(containerId);
            
            if (tickets.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <p>📭 No hay tickets en esta sección</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = tickets.map(ticket => `
                <div class="ticket-item ${ticket.estado.toLowerCase().replace(' ', '-')}">
                    <div class="ticket-info">
                        <h4>
                            🎫 Ticket #${ticket.id} - ${ticket.nombreCliente}
                            ${getPrioridadBadge(ticket.prioridad)}
                        </h4>
                        <p><strong>Operación:</strong> ${ticket.tipoOperacion}</p>
                        <p><strong>Hora:</strong> ${ticket.horaCreacionFormato}</p>
                        <p><strong>Estado:</strong> ${ticket.estado}</p>
                    </div>
                    <div class="ticket-actions">
                        ${getAccionesTicket(ticket)}
                    </div>
                </div>
            `).join('');
        }

        function getPrioridadBadge(prioridad) {
            const badges = {
                0: '<span class="badge badge-normal">Normal</span>',
                1: '<span class="badge badge-preferente">Preferente</span>',
                2: '<span class="badge badge-urgente">Urgente</span>'
            };
            return badges[prioridad] || '';
        }

        function getAccionesTicket(ticket) {
            let acciones = [];
            
            if (ticket.estado === 'En Espera') {
                // Si el ticket es urgente o preferente, mostrar botón de atender
                if (ticket.prioridad === 2 || ticket.prioridad === 1) {
                    acciones.push(`<button onclick="atenderTicketPorId(${ticket.id})" class="btn btn-success btn-small">▶️ Atender</button>`);
                }
                acciones.push(`<button onclick="editarTicket(${ticket.id})" class="btn btn-info btn-small">✏️ Editar</button>`);
                acciones.push(`<button onclick="eliminarTicket(${ticket.id})" class="btn btn-danger btn-small">🗑️ Eliminar</button>`);
            }
            
            if (ticket.estado === 'Atendiendo') {
                acciones.push(`<button onclick="completarTicket(${ticket.id})" class="btn btn-success btn-small">✅ Completar</button>`);
            }
            
            return acciones.join('');
        }

        async function atenderSiguiente() {
            try {
                const response = await fetch(`${API_URL}/atender`, { method: 'POST' });
                if (response.ok) {
                    const ticket = await response.json();
                    mostrarNotificacion(`✅ Atendiendo: ${ticket.nombreCliente}`, 'success');
                    actualizarTodo();
                } else {
                    mostrarNotificacion('⚠️ No hay tickets en espera', 'error');
                }
            } catch (error) {
                mostrarNotificacion('❌ Error de conexión', 'error');
            }
        }

        async function atenderTicketPorId(id) {
            try {
                const response = await fetch(`${API_URL}/atender/${id}`, { method: 'POST' });
                if (response.ok) {
                    const ticket = await response.json();
                    const prioridadTexto = ticket.prioridad === 2 ? 'URGENTE' : 'PREFERENTE';
                    const emoji = ticket.prioridad === 2 ? '🚨' : '⭐';
                    mostrarNotificacion(`${emoji} Atendiendo ticket ${prioridadTexto} #${id}: ${ticket.nombreCliente}`, 'success');
                    actualizarTodo();
                } else {
                    mostrarNotificacion(`⚠️ No se pudo atender el ticket #${id}`, 'error');
                }
            } catch (error) {
                mostrarNotificacion('❌ Error de conexión', 'error');
            }
        }

        async function completarTicket(id) {
            try {
                const response = await fetch(`${API_URL}/completar/${id}`, { method: 'POST' });
                if (response.ok) {
                    mostrarNotificacion(`✅ Ticket #${id} completado`, 'success');
                    actualizarTodo();
                }
            } catch (error) {
                mostrarNotificacion('❌ Error al completar ticket', 'error');
            }
        }

        async function eliminarTicket(id) {
            if (!confirm('¿Está seguro de eliminar este ticket?')) return;
            
            try {
                const response = await fetch(`${API_URL}/tickets/${id}`, { method: 'DELETE' });
                if (response.ok) {
                    mostrarNotificacion(`✅ Ticket #${id} eliminado`, 'success');
                    actualizarTodo();
                } else {
                    mostrarNotificacion('❌ No se puede eliminar el ticket', 'error');
                }
            } catch (error) {
                mostrarNotificacion('❌ Error de conexión', 'error');
            }
        }

        async function editarTicket(id) {
            try {
                const response = await fetch(`${API_URL}/tickets/${id}`);
                const ticket = await response.json();
                
                document.getElementById('editTicketId').value = ticket.id;
                document.getElementById('editNombre').value = ticket.nombreCliente;
                document.getElementById('editOperacion').value = ticket.tipoOperacion;
                document.getElementById('editPrioridad').value = ticket.prioridad;
                
                document.getElementById('modalEditar').style.display = 'block';
            } catch (error) {
                mostrarNotificacion('❌ Error al cargar ticket', 'error');
            }
        }

        function cerrarModal() {
            document.getElementById('modalEditar').style.display = 'none';
        }

        async function cargarDatosPrueba() {
            try {
                const response = await fetch(`${API_URL}/datos-prueba`, { method: 'POST' });
                if (response.ok) {
                    mostrarNotificacion('✅ Datos de prueba cargados', 'success');
                    actualizarTodo();
                }
            } catch (error) {
                mostrarNotificacion('❌ Error al cargar datos', 'error');
            }
        }

        async function limpiarCompletados() {
            if (!confirm('¿Eliminar todos los tickets completados?')) return;
            
            try {
                const response = await fetch(`${API_URL}/limpiar-completados`, { method: 'DELETE' });
                if (response.ok) {
                    mostrarNotificacion('✅ Tickets completados eliminados', 'success');
                    actualizarTodo();
                }
            } catch (error) {
                mostrarNotificacion('❌ Error al limpiar', 'error');
            }
        }

        function mostrarTab(tab) {
            // Actualizar botones
            document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            // Mostrar contenido
            ['espera', 'atendiendo', 'completados', 'todos'].forEach(t => {
                document.getElementById(`tab-${t}`).style.display = t === tab ? 'block' : 'none';
            });
            
            currentTab = tab;
        }

        function mostrarNotificacion(mensaje, tipo) {
            const notif = document.getElementById('notification');
            notif.textContent = mensaje;
            notif.className = tipo;
            notif.style.display = 'block';
            
            setTimeout(() => {
                notif.style.display = 'none';
            }, 3000);
        }

        // Cerrar modal al hacer clic fuera
        window.onclick = function(event) {
            const modal = document.getElementById('modalEditar');
            if (event.target === modal) {
                cerrarModal();
            }
        }
    </script>
</body>
</html>
